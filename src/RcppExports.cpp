// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sepcor_rcpp
Rcpp::List sepcor_rcpp(const arma::mat E, arma::vec W, const int n_rows, const double tol, const int maxiter, const bool verbose);
RcppExport SEXP _sepcor_sepcor_rcpp(SEXP ESEXP, SEXP WSEXP, SEXP n_rowsSEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type E(ESEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int >::type n_rows(n_rowsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(sepcor_rcpp(E, W, n_rows, tol, maxiter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// sepcov_rcpp
Rcpp::List sepcov_rcpp(arma::mat E, const int n_rows, const double tol, const int maxiter, const bool verbose);
RcppExport SEXP _sepcor_sepcov_rcpp(SEXP ESEXP, SEXP n_rowsSEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type E(ESEXP);
    Rcpp::traits::input_parameter< const int >::type n_rows(n_rowsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(sepcov_rcpp(E, n_rows, tol, maxiter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// prof_log_lik_rcpp
double prof_log_lik_rcpp(arma::mat& Sigma_chol, const arma::mat& E);
RcppExport SEXP _sepcor_prof_log_lik_rcpp(SEXP Sigma_cholSEXP, SEXP ESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma_chol(Sigma_cholSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type E(ESEXP);
    rcpp_result_gen = Rcpp::wrap(prof_log_lik_rcpp(Sigma_chol, E));
    return rcpp_result_gen;
END_RCPP
}
// ll_grad_UV
arma::vec ll_grad_UV(arma::mat& E, arma::mat U, arma::mat V);
RcppExport SEXP _sepcor_ll_grad_UV(SEXP ESEXP, SEXP USEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type E(ESEXP);
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_grad_UV(E, U, V));
    return rcpp_result_gen;
END_RCPP
}
// ll_grad_W_inv
arma::vec ll_grad_W_inv(arma::vec& W, arma::mat& E, arma::mat U, arma::mat V);
RcppExport SEXP _sepcor_ll_grad_W_inv(SEXP WSEXP, SEXP ESEXP, SEXP USEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type E(ESEXP);
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_grad_W_inv(W, E, U, V));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sepcor_sepcor_rcpp", (DL_FUNC) &_sepcor_sepcor_rcpp, 6},
    {"_sepcor_sepcov_rcpp", (DL_FUNC) &_sepcor_sepcov_rcpp, 5},
    {"_sepcor_prof_log_lik_rcpp", (DL_FUNC) &_sepcor_prof_log_lik_rcpp, 2},
    {"_sepcor_ll_grad_UV", (DL_FUNC) &_sepcor_ll_grad_UV, 3},
    {"_sepcor_ll_grad_W_inv", (DL_FUNC) &_sepcor_ll_grad_W_inv, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_sepcor(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
